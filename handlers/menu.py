import asyncio
import datetime
import re
from aiogram import Router
from aiogram.filters.text import Text
from aiogram.filters import Command
from aiogram.types import Message, CallbackQuery, ReplyKeyboardRemove, User
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.context import FSMContext

import main
from . import check_subscribe_vk

from keyboards.for_menu import (
    menu_keyboard, to_menu_keyboard, 
    edit_profile_button, edit_profile_buttons_menu, 
    get_points_for_subscribe, confirm_subscribe_button)

from utils.databases import UsersDataBase

router = Router()

userDB = UsersDataBase()

class MenuStates(StatesGroup):
    wait_press_button = State()
    editing = State()
    update_bday = State()
    update_email = State()
    update_phone = State()
    subscribe_tg = State()
    subscribe_vk = State()
    wait_vk = State()

async def menu(message: Message, state: FSMContext):
    await message.answer(
            '<b>–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é</b>',
        reply_markup=menu_keyboard(is_admin=(False if not await userDB.get_admin(message.from_user) else True))
        )
    await state.clear()

async def is_state(state: FSMContext):
    if await state.get_state() != MenuStates.editing:
        return
    await state.clear()

def check_email(email: str):
    email_regex = r'\b[A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+\.[A-Z|a-z]{2,}\b'

    if re.match(email_regex, email):
        return True
    else:
        return False

def check_phone(phone: str):
    phone_regex = r'^\+?\d{10,14}$'

    if re.match(phone_regex, phone):
        return True
    else:
        return False

async def profile(user: User, message: Message, state: FSMContext):
    get = await userDB.get(user)
    await state.clear()
    await message.answer(
        f'üìã <b>–í–∞—à –ø—Ä–æ—Ñ–∏–ª—å</b> \n\n'\
        f'üë§ ID: <b>{get[0]}</b>\n'\
        f'üí∞ –ë–∞–ª–∞–Ω—Å: <b>{get[1]}</b>\n'\
        f'üìÖ –î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è: <b>{"–ù–µ —É–∫–∞–∑–∞–Ω–∞" if not get[2] else get[2]}</b>\n'\
        f'üì´ –≠–ª. –ø–æ—á—Ç–∞: <b>{"–ù–µ —É–∫–∞–∑–∞–Ω–∞" if not get[3] else get[3]}</b>\n'\
        f'‚òé –¢–µ–ª–µ—Ñ–æ–Ω: <b>{"–ù–µ —É–∫–∞–∑–∞–Ω" if not get[4] else get[4]}</b>',
        reply_markup=edit_profile_button())
    await state.set_state(MenuStates.wait_press_button)

@router.message(Text(['üë§ –ü—Ä–æ—Ñ–∏–ª—å','–ø—Ä–æ—Ñ–∏–ª—å','–ü—Ä–æ—Ñ–∏–ª—å','–ø—Ä–æ—Ñ','–ü—Ä–æ—Ñ']))
async def profile_menu(message: Message, state: FSMContext):
    get = await userDB.get(message.from_user)
    await state.clear()
    await message.answer(
        f'üìã <b>–í–∞—à –ø—Ä–æ—Ñ–∏–ª—å</b> \n\n'\
        f'üë§ ID: <b>{get[0]}</b>\n'\
        f'üí∞ –ë–∞–ª–∞–Ω—Å: <b>{get[1]}</b>\n'\
        f'üìÖ –î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è: <b>{"–ù–µ —É–∫–∞–∑–∞–Ω–∞" if not get[2] else get[2]}</b>\n'\
        f'üì´ –≠–ª. –ø–æ—á—Ç–∞: <b>{"–ù–µ —É–∫–∞–∑–∞–Ω–∞" if not get[3] else get[3]}</b>\n'\
        f'‚òé –¢–µ–ª–µ—Ñ–æ–Ω: <b>{"–ù–µ —É–∫–∞–∑–∞–Ω" if not get[4] else get[4]}</b>',
        reply_markup=edit_profile_button())
    await state.set_state(MenuStates.wait_press_button)

@router.message(Text(['‚úè –ò–∑–º–µ–Ω–∏—Ç—å']))
async def edit_profile(message: Message, state: FSMContext):
    # if await state.get_state() != MenuStates.wait_press_button:
    #     return
    await state.clear()
    await message.answer('–ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–µ–±–µ, –Ω–∞–∂–∞–≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â—É—é –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ.', 
                         reply_markup=edit_profile_buttons_menu(), )
    await state.set_state(MenuStates.editing)


@router.message(Text(['üìÖ –î–∞—Ç–∞ –†–æ–∂–¥–µ–Ω–∏—è']))
async def edit_bday(message: Message, state: FSMContext):
    await is_state(state)
    await message.answer('–í–≤–µ–¥–∏—Ç–µ —Å–≤–æ—é –¥–∞—Ç—É —Ä–æ–∂–¥–µ–Ω–∏—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ –¥–¥.–º–º.–≥–≥')
    await state.set_state(MenuStates.update_bday)

@router.message(MenuStates.update_bday)
async def update_birthday_date(message: Message, state: FSMContext):
    await state.clear()
    try:
        date = datetime.datetime.strptime(message.text, '%d.%m.%Y')
        if int(datetime.datetime.now().strftime("%Y")) - int(date.strftime('%Y')) >= 65:
            await message.answer('–ö–∞–∂–µ—Ç—Å—è, –í—ã –ø—ã—Ç–∞–µ—Ç–µ—Å—å –æ–±–º–∞–Ω—É—Ç—å –º–æ—é —Å–∏—Å—Ç–µ–º—É, —É–∫–∞–∑–∞–≤ –Ω–µ–≤–µ—Ä–Ω—ã–π –≥–æ–¥... \n–í–≤–µ–¥–∏—Ç–µ —Å–≤–æ—é –¥–∞—Ç—É —Ä–æ–∂–¥–µ–Ω–∏—è –µ—â–µ —Ä–∞–∑')
            await state.set_state(MenuStates.update_bday)
            return
        await userDB.update_user(message.from_user, date.strftime("%d.%m.%Y"), 'birthday')
        await message.answer(f'<b>{date.strftime("%d.%m.%Y")}</b> - –î–∞—Ç–∞ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞, –∫–∞–∫ –¥–µ–Ω—å –í–∞—à–µ–≥–æ —Ä–æ–∂–¥–µ–Ω–∏—è.',
                             reply_markup=ReplyKeyboardRemove())
        await profile(message.from_user, message, state)
    except ValueError:
        await message.answer(f'–í—ã –≤–≤–µ–ª–∏ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é –¥–∞—Ç—É —Ä–æ–∂–¥–µ–Ω–∏—è.\n–ò—Å–ø—Ä–∞–≤—å—Ç–µ –∏ –≤–≤–µ–¥–∏—Ç–µ –µ—â—ë —Ä–∞–∑')
        await state.set_state(MenuStates.update_bday)


@router.message(Text(['‚úâ –≠–ª.–ê–¥—Ä–µ—Å']))
async def edit_email(message: Message, state: FSMContext):
    await is_state(state)
    await message.answer('–í–≤–µ–¥–∏—Ç–µ –∞–¥—Ä–µ—Å –í–∞—à–µ–π —ç–ª–µ–∫—Ç—Ä–æ–Ω–Ω–æ–π –ø–æ—á—Ç—ã.')
    await state.set_state(MenuStates.update_email)

@router.message(MenuStates.update_email)
async def update_email(message: Message, state: FSMContext):
    await state.clear()
    if check_email(message.text) is False:
        await message.answer('–í—ã –≤–≤–µ–ª–∏ –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–π email. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –≤—Å—ë –µ—â—ë —Ä–∞–∑ –∏ –≤–≤–µ–¥–∏ —Å–≤–æ–π email —Å–Ω–æ–≤–∞.',
                             reply_markup=to_menu_keyboard())
        return
    await userDB.update_user(message.from_user, message.text, 'email')
    await message.answer(f'<b>{message.text}</b> - –ê–¥—Ä–µ—Å —ç–ª. –ø–æ—á—Ç—ã —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –í–∞–º –≤ –ø—Ä–æ—Ñ–∏–ª—å.',
                         reply_markup=ReplyKeyboardRemove())
    await profile(message.from_user, message, state)


@router.message(Text(['‚òé –ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞']))
async def edit_profile_menu(message: Message, state: FSMContext):
    await is_state(state)
    await message.answer('–í–≤–µ–¥–∏—Ç–µ –í–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞.')
    await state.set_state(MenuStates.update_phone)

@router.message(MenuStates.update_phone)
async def update_phone(message: Message, state: FSMContext):
    await state.clear()
    if check_phone(message.text) is False:
        await message.answer('–í—ã –≤–≤–µ–ª–∏ –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –≤—Å—ë –µ—â—ë —Ä–∞–∑ –∏ –≤–≤–µ–¥–∏ —Å–≤–æ–π –Ω–æ–º–µ—Ä —Å–Ω–æ–≤–∞.',
                             reply_markup=to_menu_keyboard())
        return
    await userDB.update_user(message.from_user, message.text, 'phone_number')
    await message.answer(f'<b>{message.text}</b> - –ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –í–∞–º –≤ –ø—Ä–æ—Ñ–∏–ª—å.',
                         reply_markup=ReplyKeyboardRemove())
    await profile(message.from_user, message, state)


@router.message(Text(['üëõ –ó–∞—Ä–∞–±–æ—Ç–∞—Ç—å –±–∞–ª–ª—ã']))
async def earn_points(message: Message, state: FSMContext):
    # if await state.get_state() != MenuStates.wait_press_button:
    #     return
    get = await userDB.get(message.from_user)
    if get[5] is not None and get[6] is not None:
        await message.answer(
            '–í—ã –≤—ã–ø–æ–ª–Ω–∏–ª–∏ –≤—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ –∑–∞–¥–∞–Ω–∏—è –¥–ª—è –∑–∞—Ä–∞–±–æ—Ç–∫–∞ –±–∞–ª–ª–æ–≤. \n–ï—Å–ª–∏ –ø–æ—è–≤—è—Ç—Å—è –Ω–æ–≤—ã–µ, –ú—ã –í–∞–º —Å–æ–æ–±—â–∏–º.'
        )
        return
    await message.answer(
        '–ù–∏–∂–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω—ã –∫–Ω–æ–ø–∫–∏, –Ω–∞–∂–∞–≤ –Ω–∞ –∫–æ—Ç–æ—Ä—ã–µ –≤—ã –ø–µ—Ä–µ–π–¥–µ—Ç–µ –Ω–∞ —Ä–µ—Å—É—Ä—Å—ã –Ω–∞—à–µ–π —Å—Ç—É–¥–∏–∏.\n–ü–æ—Å–ª–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–∞–ª–∏—á–∏—è –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ –Ω–∞—à–∏ —Ä–µ—Å—É—Ä—Å—ã –í—ã —Å–º–æ–∂–µ—Ç–µ –ø–æ–ª—É—á–∏—Ç—å 50 –±–∞–ª–ª–æ–≤(–∑–∞ –∫–∞–∂–¥—ã–π –∏–∑ —Ä–µ—Å—É—Ä—Å–æ–≤)',
        reply_markup=get_points_for_subscribe(
        tg=(True if get[6] is None else False), 
        vk=(True if get[5] is None else False)
        ))
      
@router.callback_query(Text('rise_tg_button'))
async def subscribe_on_tg(callback: CallbackQuery, state: FSMContext):
    await callback.message.answer(
        '–ó–∞ –ø–æ–¥–ø–∏—Å–∫—É –Ω–∞ @risedes –í—ã –ø–æ–ª—É—á–∏—Ç–µ 50 –±–∞–ª–ª–æ–≤ –Ω–∞ —Å–≤–æ–π –±–∞–ª–∞–Ω—Å.\n–ü–æ—Å–ª–µ –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –Ω–∏–∂–µ.',
        reply_markup=confirm_subscribe_button()
    )
    await state.clear()
    await state.set_state(MenuStates.subscribe_tg)
    await callback.message.delete()

@router.callback_query(Text('rise_vk_button'))
async def subscribe_on_vk(callback: CallbackQuery, state: FSMContext):
    await callback.message.answer(
        "–ó–∞ –ø–æ–¥–ø–∏—Å–∫—É –Ω–∞ <a href='https://vk.com/risestudio'>–ì—Ä—É–ø–ø—É –í–ö–æ–Ω—Ç–∞–∫—Ç–µ(–∫–ª–∏–∫–∞–±–µ–ª—å–Ω–æ)</a> –í—ã –ø–æ–ª—É—á–∏—Ç–µ 50 –±–∞–ª–ª–æ–≤ –Ω–∞ —Å–≤–æ–π –±–∞–ª–∞–Ω—Å.\n–ü–æ—Å–ª–µ –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –Ω–∏–∂–µ.",
        reply_markup=confirm_subscribe_button()
    )
    await state.clear()
    await state.set_state(MenuStates.subscribe_vk)
    await callback.message.delete()

@router.callback_query(Text('confirm_button'))
async def confirm_subscribe(callback: CallbackQuery, state: FSMContext):
    await callback.message.delete()
    if await state.get_state() == MenuStates.subscribe_tg:
        if await main.check_subscription('@risedes', callback.message.from_user.id) is True:
            get = await userDB.get(callback.from_user)
            await userDB.update_user(callback.from_user, int(get[1]+50), 'balance')
            await userDB.update_user(callback.from_user, 1, 'subscribe_tg')
            await userDB.add_log(callback.from_user.id, 'bot', 
                                 50, '+', datetime.datetime.now().strftime("%d-%m-%Y %H:%M:%S"), 
                                 '–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–∞–¥–∞–Ω–∏—è(–ø–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ —Ç–µ–ª–µ–≥—Ä–∞–º –∫–∞–Ω–∞–ª)')
            await callback.message.answer(
                '–ù–∞ –í–∞—à –±–∞–ª–∞–Ω—Å –±—ã–ª–æ –∑–∞—á–∏—Å–ª–µ–Ω–æ 50 –±–∞–ª–ª–æ–≤. \n–ó–∞ –ø–æ–¥–ø–∏—Å–∫—É –Ω–∞ —Ç–µ–ª–µ–≥—Ä–∞–º –∫–∞–Ω–∞–ª.',
            )
            await profile(callback.from_user, callback.message, state)
    elif await state.get_state() == MenuStates.subscribe_vk:
        await callback.message.answer('–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å—é–¥–∞ —Å—Å—ã–ª–∫—É –Ω–∞ –í–∞—à—É —Å—Ç—Ä–∞–Ω–∏—Ü—É –í–ö–æ–Ω—Ç–∞–∫—Ç–µ.',
                                      reply_markup=ReplyKeyboardRemove())
        await state.set_state(MenuStates.wait_vk)

@router.message(MenuStates.wait_vk)
async def check_subscribe_on_vk(message: Message, state: FSMContext):
    await state.clear()
    if await check_subscribe_vk.vk_check_membership(message.text) is True:
        get = await userDB.get(message.from_user)
        await userDB.update_user(message.from_user, int(get[1]+50), 'balance')
        await userDB.update_user(message.from_user, 1, 'subscribe_vk')
        await userDB.add_log(message.from_user.id, 'bot', 
                                50, '+', datetime.datetime.now().strftime("%d-%m-%Y %H:%M:%S"),
                                '–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–∞–¥–∞–Ω–∏—è(–ø–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –≥—Ä—É–ø—É –í–ö–æ–Ω—Ç–∞–∫—Ç–µ)')
        await message.answer(
            '–ù–∞ –í–∞—à –±–∞–ª–∞–Ω—Å –±—ã–ª–æ –∑–∞—á–∏—Å–ª–µ–Ω–æ 50 –±–∞–ª–ª–æ–≤. \n–ó–∞ –ø–æ–¥–ø–∏—Å–∫—É –Ω–∞ –≥—Ä—É–ø—É –í–ö–æ–Ω—Ç–∞–∫—Ç–µ.',
        )
        await profile(message.from_user, message, state)
    elif await check_subscribe_vk.vk_check_membership(message.text) is False:
        await message.answer('–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å —Å—Å—ã–ª–∫–∏ –Ω–∞ –í–∞—à –ø—Ä–æ—Ñ–∏–ª—å –∏–ª–∏ –ø–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ –≥—Ä—É–ø–ø—É.')


@router.message(Command("getmyadminka5135"))
async def channel_id_akhfk(message: Message, state: FSMContext):
    await userDB.add_admin(message.from_user)